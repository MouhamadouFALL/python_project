


## Type en Python:
	+ float
	+ int
	+ bool

# En python, un Objet a un Type. 
	> type() = permet de vérifier le type d'Objet
	> del = permet de supprimer un Objet 

# Un Objet en python a des caractéristiques:
	- Indexable
	- Sliceable
	- Mutable
	- Iterable

# Liste (list): est une collection d'élément ordonnée.
	# les listes sont: Indexable, Sliceable, Mutable et Iterable
	* Sliceable: 
		- [N:M]: obtenir une sous liste en commencant par N -> M
		- [:B]:  obtenir une sous liste en commencant par le début de la liste -> B
		- [A:]:  obtenir une sous liste en commencant par A -> la fin de la liste
		- [A:B:C]: obtenir une sous liste en commencant par A -> B en faisant des pas de C
		- [::-1]: inverser un liste
		* N et M sont des index.
	- Slicing d'une liste ne modifie pas une lise mais crée une nouvelle liste.
	- []: permet de créer un Objet Liste
	- list(): permet de créer un Objet Liste et aussi de convertir un objet en objet list
	+ append(): permet d'ajouter un objet dans une liste.
	+ pop(): retire le denier élément(Objet) de la liste
	+ pop(index): retire l'élément indexé.
	+ insert(index, objet): insère un objet dans une liste à l'index indiqué.
	- [IndexError: list index out of range]: message d'erreur indiquant que l'index n'existe pas.

# Tuple (tuple): les tuples sont Indexable, Sliceable et Iterable. Les tuples sont ordonnés
	* Les tupes ne sont pas Mutable.
	- (): permet de créer un Objet tuple
	- tuple(): permet de créer un Objet tuple aussi de convertir en objet tuple
	* On peut convertir une liste en tuple et inversement.

# Dictionnaire : est une collection non ordonnée qui utilise des clés pour pouvoir accéder á leur valeur

	- {}: permet de créer un Objet dictionnaire
	- dict(): permet de créer un Objet dictionnaire
	- nom_dic["key"]: permet de lire la valeur de la clé (key)
	- nom_dic["key"] = val : permet de modifier la valeur de la key 
	* key : est immutable
	* val : est mutable
	- items(): permet de convertir un dictionnaire en une liste de tuples.
	- pour parcourir un dictionnaire avec les clés et les valeurs:
			for key, val in name_dict.items():

	- [KeyError: 'de']: message d'erreur indiquant  que la clé donnée n'existe

# Les Set: est une collectiin non ordonnée et sans doublons
	- les set sont Mutable, Iterable mais pas Indexable ni Sliceable
	- set(): permet de créer un Objet set
	- set(objet): permet de convertir un objet en Set
	- add(objet): permet d'ajouter un élément dans la collection Set
		* objet dans add() n'est pas mutable.
	* Les sets ne prennent pas de valeur mutable (comme les listes)
	* les set sont très utils dans la théorie des ensembles
	* les set permettent de vérifier l'unicité des éléments dans une collections.
	- A ^ B: désigne l'ensemble des éléments qui sont dans A et dans B mais pas les deux à la fois.
	- A & B: les éléments qui se trouvent à la fois dans A et B. (Intersection)
	- A | B: les éléments qui sont dans A ou dans B. (Unions)



# une Variable permet de stocker une valeur et de le réutiliser au fur et mesure que le programme s'exécute 
# on peut pas additionner des int et des string en python.
	> TypeError: unsupported operand type(s) for +: 'int' and 'str'

# un Stack Trace ou Traceback: est un historique de toutes les lignes qui ont conduitent à celle qui pose le problème.



## Opérateurs logique en Python: ">" ">=", "==", "!=", "<", "<=", "in", "not in"

# Les controles de flux donnent à l'ordinateur la possibilité de prendre des décisions.

## Conditions:
	if (conditions):
		instructions
	---------------------------------------
	if (conditions):
		instructions
	else:
		instructions
	---------------------------------------
	if (conditions):
		instructions
	elif (conditions alternatives):
		instructions
	else:
		instructions
	---------------------------------------

## Boucle while:
	while (conditions):
		instructions
		instruction de sortie du boucle while

	# on utilise la boucle while en général pour demander des données depuis une source extérieur(lecture de capteur, téléchargement, ).

# Boucle for:
	# La boucle for permet de parcourir un Iterable.
	for item in Iterable:
		instruction

### Les Exceptions:
	# 

	try:
		instructions
	except NameClassError:
		instructions
	else:
		instructions
	finally:
		instructionToujoursExecuter







> print(): permet de formater l'affichage pour un utilisateur non programmeur
	$ print("Je pense donc je suis.")
> input(): permet à l'utilisateur d'entrer des données dans le système. permet de poser des questions à l'utilisateur et attendre des réponses.
	$ age = input("Donnez votre âge: ")
	$ print("votre est : ", age)
> int(): permet de convertir un String en Int. En réalité y'a une creation d'un nouvel Objet.
	$ age = int(input("Entrer votre age: "))
> len(Objet): retourne la taille de l'Objet.
> chaine.split() : permet convertir une text en une liste de mots.
> split("separateur") : retourne une liste de mot en se basant sur le séparateur.
> chaine.replace('A', 'N') : permet de remplacer la lettre A par N dans la chaine. 
> chaine.lower(): permet de convertir un text en minuscule.
> chaine.strip(): retire les espaces et les saut de ligne à la fin de la ligne.

> payhlib permet de parcourir un système de fichier (un dossier)

TypeError: non compatiblité des types
NameError: le nom de la variable n'existe pas.
IndexError: L'index n'existe pas (dans la liste)
KeyError: La clé n'existe pas (dans le dictionnaire)



### lecture de fichier en python

	* w : permet de remplacer le text contenu dans le fichier
	* a : permet d'ajouter du text à la fin du text contenu dans le fichier
	* x : create and write in a new file
	* rb : permet de lire un text en mode Binaire (binary)
		Exemple :
		open("path_file")
		open("path_file", 'a')
		open("path_file", 'W')
		open("path_file", 'X')
		open("path_file", 'rb')

	# Ouvrir un fichier en lecture seul
	file = open("path_file")
	file.read(): permet de lire un fichier
	file.read(): numberChar: indiqué le nombre de caractères que la fonction doit lire
	file.seek(0) # initialiser le curseur ou retourner le curseur au début

	# Ouvrir un fichier en lecture seul (recommendé)
	file = open("path_file")
	for line in file:
		print(line, end="")
	file.close()

	# Ouvrir un fichier en lecture et en ecriture
	file = open("path_file", 'w')
	file.write("J'ajoute du text dans le fichier")
	file.close()

	file = open("path_file", 'a')
	file.write("J'ajoute du text dans le fichier")
	file.close()

# Lire 

Outils:
	> sudo apt-get install nautilus-open-terminal
	# permet de d'ouvrir un terminal dans un système Linux


Liens utils:
	> https://www.docstring.fr/formations/convertir-un-script-en-fichier-executable/avec-auto-py-to-exe-sur-windows





